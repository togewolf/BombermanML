Notes. For example, write down libraries here that we include and might add to the docker file later.
Play against rule-based agents:
python main.py play --agents user_agent rule_based_agent rule_based_agent rule_based_agent --turn-based

python main.py play --no-gui --agents agent2_qlnn --train 1 --scenario coin-heaven



idea for later: data augmentation. (not useful yet since for the qlnn the states are the features - perhaps for a model that gets the whole arena as input?)

def rotate_state(state, degrees):
    """
    Rotate the 2D game state grid by the given degrees.
    """
    if degrees == 90:
        return np.rot90(state, k=1)
    elif degrees == 180:
        return np.rot90(state, k=2)
    elif degrees == 270:
        return np.rot90(state, k=3)
    else:
        return state  # No rotation for 0 degrees

def mirror_state(state, axis):
    """
    Mirror the game state along the specified axis.
    axis=0 for horizontal, axis=1 for vertical.
    """
    return np.flip(state, axis=axis)

def augment_state(state):
    """
    Generate all augmented versions of the state: rotations (90, 180, 270 degrees)
    and mirrors (horizontal, vertical).
    """
    augmented_states = []
    for degrees in [0, 90, 180, 270]:
        rotated = rotate_state(state, degrees)
        augmented_states.append(rotated)
        augmented_states.append(mirror_state(rotated, axis=0))  # Horizontal flip
        augmented_states.append(mirror_state(rotated, axis=1))  # Vertical flip
    return augmented_states